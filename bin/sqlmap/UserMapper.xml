<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace命名空间，作用就是对sql进行分类化管理，理解sql隔离 注意：使用mapper代理方法开发，namespace有特殊重要的作用 -->
<mapper namespace="com.hjp.mybatis.mapper.UserMapper">
	<!-- 在 映射文件中配置很多sql语句 -->
	<!-- 需求：通过id查询用户表的记录 -->
	<!-- 通过 select执行数据库查询 id：标识 映射文件中的 sql 将sql语句封装到mappedStatement对象中， 所以将id称为statement的id 
		parameterType：指定输入 参数的类型，这里指定int型 #{}表示一个占位符号 #{id}： 其中的id表示接收输入 的参数，参数名称就是id，如果输入 
		参数是简单类型，#{}中的参数名可以任意，可以value或其它名称 resultType： 指定sql输出结果 的所映射的java对象类型，select指定resultType表示将单条记录映射成的java对象。 -->
	<select id="findUserById" parameterType="int"
		resultType="com.hjp.mybatis.po.User">
		select * from user where id=#{value}
	</select>

	<!-- <resultMap id="getUser" type="com.hjp.mybatis.po.User"> <id property="id" 
		column="ID" /> <result property="studentName" column="Name" /> <result property="studentAge" 
		column="Age" /> </resultMap> -->

	<!-- 自定义条件查询用户列表 -->
	<!-- <select id="findUserByName" parameterType="java.lang.String" resultType="com.hjp.mybatis.po.User"> 
		select * from user where username like '%${value}%' </select> -->
	<select id="findUserByName" parameterType="java.lang.String"
		resultType="com.hjp.mybatis.po.User">
		select * from user where username like '%${value}%'
	</select>
	<select id="findUserByNameParam" parameterType="java.lang.String"
		resultType="com.hjp.mybatis.po.User">
		select * from user where
		username=#{userName11,jdbcType=VARCHAR}
	</select>

	<!-- 添加用户 -->
	<insert id="insertUser" parameterType="com.hjp.mybatis.po.User">
		<selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
			select
			LAST_INSERT_ID()
		</selectKey>
		insert into user(username,birthday,sex,address)
		values(#{username},#{birthday},#{sex},#{address})
	</insert>

	<!-- 更新用户 -->
	<update id="updateUser" parameterType="com.hjp.mybatis.po.User">
		update user set
		username=#{username},birthday=#{birthday},sex=#{sex},address=#{address}
		where id=#{id}
	</update>

	<!-- 删除用户 -->
	<delete id="deleteUserById" parameterType="int">
		delete from user where
		id=#{id}
	</delete>

	<!-- 定义sql片段 id：sql片段的唯 一标识 经验：是基于单表来定义sql片段，这样话这个sql片段可重用性才高 在sql片段中不要包括 
		where -->
	<sql id="query_user_where">
		<if test="userCustom!=null">
			<if test="userCustom.sex!=null and userCustom.sex!=''">
				and user.sex = #{userCustom.sex}
			</if>
			<if test="userCustom.username!=null and userCustom.username!=''">
				and user.username like '%${userCustom.username}%'
			</if>
			<if test="ids!=null">
				<!-- 使用 foreach遍历传入ids collection：指定输入 对象中集合属性 item：每个遍历生成对象中 open：开始遍历时拼接的串 
					close：结束遍历时拼接的串 separator：遍历的两个对象中需要拼接的串 -->
				<!-- 使用实现下边的sql拼接： AND (id=1 OR id=10 OR id=16) -->
				<foreach collection="ids" item="user_id" open="AND (" close=")"
					separator="or">
					<!-- 每个遍历需要拼接的串 -->
					id=#{user_id}
				</foreach>

				<!-- 实现 “ and id IN(1,10,16)”拼接 -->
				<!-- <foreach collection="ids" item="user_id" open="and id IN(" close=")" 
					separator=","> 每个遍历需要拼接的串 #{user_id} </foreach> -->

			</if>
		</if>
	</sql>

	<!-- 用户信息综合查询 #{userCustom.sex}:取出pojo包装对象中性别值 ${userCustom.username}：取出pojo包装对象中用户名称 -->
	<select id="findUserList" parameterType="com.hjp.mybatis.po.UserQueryVo"
		resultType="com.hjp.mybatis.po.UserCustom">
		select * from user
		<!-- where可以自动去掉条件中的第一个and -->
		<where>
			<!-- 引用sql片段 的id，如果refid指定的id不在本mapper文件中，需要前边加namespace -->
			<include refid="query_user_where"></include>
			<!-- 在这里还要引用其它的sql片段 -->
		</where>
	</select>
    

</mapper>